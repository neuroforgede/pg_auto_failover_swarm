version: "3.8"

x-postgres-volume: &postgres-node-volume
  {{ postgres_node_volume_config }}

x-monitor-volume: &monitor-node-volume
  {{ monitor_node_volume_config }}

services:

  monitor:
    image: neuroforgede/pgaf-swarm:14.6
    command: monitor
    networks:
      pgaf:
        aliases:
          - monitor.local
    environment:
      PGAF_SSL_MODE: verify-ca
      PGAF_HOSTNAME: monitor.local
      PGAF_NAME: monitor.local
      PGAF_MONITOR_HOSTNAME: monitor.local
    secrets:
      - source: monitor_ssl_ca
        target: ssl_ca
        uid: '999'
        gid: '999'
        mode: 0600
      - source: monitor_ssl_cert
        target: ssl_cert
        uid: '999'
        gid: '999'
        mode: 0600
      - source: monitor_ssl_key
        target: ssl_key
        uid: '999'
        gid: '999'
        mode: 0600
    volumes:
      - monitor:/var/lib/postgresql
  
  node_1:
    image: neuroforgede/pgaf-swarm:14.6
    command: db-server
    networks:
      pgaf:
        aliases:
          - node1.local
    environment:
      PGAF_SSL_MODE: verify-ca
      PGAF_HOSTNAME: node1.local
      PGAF_NAME: node1.local
      PGAF_MONITOR_HOSTNAME: monitor.local
    secrets:
      - source: postgres_ssl_ca
        target: ssl_ca
        uid: '999'
        gid: '999'
        mode: 0600
      - source: postgres_ssl_cert
        target: ssl_cert
        uid: '999'
        gid: '999'
        mode: 0600
      - source: postgres_ssl_key
        target: ssl_key
        uid: '999'
        gid: '999'
        mode: 0600
    volumes:
      - node_1:/var/lib/postgresql
  
  node_2:
    image: neuroforgede/pgaf-swarm:14.6
    command: db-server
    networks:
      pgaf:
        aliases:
          - node2.local
    environment:
      PGAF_SSL_MODE: verify-ca
      PGAF_HOSTNAME: node2.local
      PGAF_NAME: node2.local
      PGAF_MONITOR_HOSTNAME: monitor.local
    secrets:
      - source: postgres_ssl_ca
        target: ssl_ca
        uid: '999'
        gid: '999'
        mode: 0600
      - source: postgres_ssl_cert
        target: ssl_cert
        uid: '999'
        gid: '999'
        mode: 0600
      - source: postgres_ssl_key
        target: ssl_key
        uid: '999'
        gid: '999'
        mode: 0600
    volumes:
      - node_2:/var/lib/postgresql

  admin:
    image: neuroforgede/pgaf-swarm:14.6
    entrypoint: /bin/bash -c 'tail -f /dev/null'
    command: []
    networks:
      pgaf:
    secrets:
      - source: admin_ssl_ca
        target: ssl_ca
        uid: '999'
        gid: '999'
        mode: 0600
      - source: admin_ssl_cert
        target: ssl_cert
        uid: '999'
        gid: '999'
        mode: 0600
      - source: admin_ssl_key
        target: ssl_key
        uid: '999'
        gid: '999'
        mode: 0600

secrets:
  monitor_ssl_ca:
    file: ./certs/monitor/postgres_server/rootCA-verification.pem
  monitor_ssl_cert:
    file: ./certs/monitor/postgres_server/server.crt
  monitor_ssl_key:
    file: ./certs/monitor/postgres_server/server.key

  postgres_ssl_ca:
    file: ./certs/postgres/postgres_server/rootCA-verification.pem
  postgres_ssl_cert:
    file: ./certs/postgres/postgres_server/server.crt
  postgres_ssl_key:
    file: ./certs/postgres/postgres_server/server.key

  admin_ssl_ca:
    file: ./certs/admin/postgres_server/rootCA-verification.pem
  admin_ssl_cert:
    file: ./certs/admin/postgres_server/server.crt
  admin_ssl_key:
    file: ./certs/admin/postgres_server/server.key

networks:
  pgaf:
    attachable: true
    driver: overlay
    driver_opts:
      encrypted: ""
      com.docker.network.driver.mtu: "1350"

volumes:
  node_1:
    <<: *postgres-node-volume
  node_2:
    <<: *postgres-node-volume
  monitor:
    <<: *monitor-node-volume